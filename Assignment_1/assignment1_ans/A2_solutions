A-2:

int Z;                                  |f ()
                                        |{
void f()                                |  int a;
{                                       |  int b;
        int a, b, c;                    |  int c;
        a = Z;                          |
        if (a < 10) {                   |  a = Z;
                b = 5;                  |  if (a <= 9) goto <D.1799>; else goto
                c = 17;                 |<D.1800>;
        } else {                        |  <D.1799>:
                b = 6;                  |  b = 5;
                c = 20;                 |  c = 17;
                if (a == 0) {           |  goto <D.1801>;
                        c = 0;          |  <D.1800>:
                }                       |  b = 6;
        }                               |  c = 20;
        Z = b * 10 + c;                 |  if (a == 0) goto <D.1802>; else goto
}                                       |<D.1803>;
                                        |  <D.1802>:
~                                       |  c = 0;
~                                       |  <D.1803>:
~                                       |  <D.1801>:



Questions
---------

        1.  How have if-blocks  been translated into GIMPLE  statements? Can you
            differentiate between conditional and unconditional gotos?

	ans:
	    If-blocks have been broken down  into distinct sections of code with
            labels  (named similar  to  temporary  variables). Control  transfer
            occurs with unconditional jumps (e.g. "goto X") or conditional jumps
            (e.g. "if Z then goto X else goto Y").

	
	2.  Repeat  the  above compilation,  but  now  asking for  another  dump
            that  of  the pass  "cfg".  View  this  pass  and say  whether  this
            representation makes it easier to  read and understand GIMPLEs. Draw
            the control-flow graph  of the program A-2.c on a  piece of paper by
            looking at the CFG dump.

	ans:
	    It's a bit easier to see the control flow in this representation, but
            slightly less concise in terms of number of lines.




	    int Z;                                  |
                                        |;; Function f (f, funcdef_no=0, decl_ui
void f()                                |d=1793, cgraph_uid=0, symbol_order=1)
{                                       |
        int a, b, c;                    |;; 1 loops found
        a = Z;                          |;;
        if (a < 10) {                   |;; Loop 0
                b = 5;                  |;;  header 0, latch 1
                c = 17;                 |;;  depth 0, outer -1
        } else {                        |;;  nodes: 0 1 2 3 4 5 6
                b = 6;                  |;; 2 succs { 3 4 }
                c = 20;                 |;; 3 succs { 6 }
                if (a == 0) {           |;; 4 succs { 5 6 }
                        c = 0;          |;; 5 succs { 6 }
                }                       |;; 6 succs { 1 }
        }                               |f ()
        Z = b * 10 + c;                 |{
}                                       |  int c;
                                        |  int b;
~                                       |  int a;
~                                       |
~                                       |  <bb 2> [0.00%]:


		













